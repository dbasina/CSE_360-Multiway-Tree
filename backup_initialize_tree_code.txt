public void initialize_tree(ArrayList<multiway_node> input_list_main, ArrayList<String> dependency_list_main)
			{
					/* The assumption for this function is that input_list_main and dependency_list_main are parallel.
					    Which means that, suppose input_list_main[1] = node1 then, dependency_list_main[1] = dependency string of node1. */
					
					// Copy the data into temporary Arraylists that can be manipulated without changing original data.
					ArrayList<multiway_node> input_list = new ArrayList<multiway_node>();
					ArrayList<String> dependency_list = new ArrayList<String>();
					String temp_string="";
					multiway_node temp_node = new multiway_node();
					for (int j=0;j<input_list_main.size();j++)
					{
						temp_node = input_list_main.get(j);
						temp_string= dependency_list_main.get(j);
						input_list.add(temp_node);
						dependency_list.add(temp_string);
					}
					
					// Find the index of root node and initialize it.  
					int		i=0;
					while (dependency_list.get(i)!= "NULL")
					{
						i++;
					}
					
					// Assign root node. 
					root = input_list.get(i);
					
					// Reset i
					i=0;	
					
					// Remove the "Null element"	 
					dependency_list.remove(i);
					
					//We use i to iterate through the input_list and we  use j to iterate through dependency_list. 
					// We need seperate values becuase we delete the dependency elements of the connected nodes. 
					i++;
					int j=0;
					
					while(i<input_list.size())
					{
							// Get the list of dependencies for the ith node at input_list.get(i)
							
							String node_dependencies=dependency_list.get(j);
						    
							// convert the list of dependencies into a string array
							String dependency_array[] = node_dependencies.split(",");
						
							// iterate over this array and form connections in the dependency array lists and connections array lists.
							for (int k=0;k<dependency_array.length;k++)
							{
								//PRINT CHECK
						    	//System.out.print(dependency_array[k]);
						    
								for (int l=0;l<input_list.size();l++)
								{
									if(dependency_array[k].equals(input_list.get(l).name))
									{
										// Add the dependency at input_list.get(l) to input_list.get(i)
										input_list.get(i).dependencies.add(input_list.get(l));
									
										// Add the connection input_list.get(i) to input_list.get(l)
										input_list.get(l).connections.add(input_list.get(i));
									
									}
								}
							}	
						
						
						i++;
						j++;
						
					}
					
					
			}